
function createBookFactsContainer(titleInfo, authorsInfo, bookPublishedDateInfo, viewabilityState, id, industryIdentifiers){
    /*Creating a div element with class name : bookFactsContainer.
    <div class="bookFactsContainer""></div>
    */
    let bookFactsContainer = document.createElement('div');
    bookFactsContainer.className = 'bookFactsContainer';

    /*Creating a <p> element with class name : bookTitle. As a child of the previous element, that will contain the book title as text.
    <p class="bookTitle">Title: ...  </p>
    */
    let bookTitle = document.createElement('p');
    bookTitle.innerText = `Title: ${titleInfo}`;
    bookTitle.className = 'bookTitle';
    bookFactsContainer.appendChild(bookTitle);

    /*Creating a <p> element with class name : bookTitle. As a child of the 'bookFactsContainer', that will contain the book's author as text.  
    <p class="bookAuthors"> Author/s: ... </p>
    */
    if(authorsInfo.length > 0 ){
        let bookAuthors = document.createElement('p');
        bookAuthors.innerText = `Author/s: ${authorsInfo.join(', ')}`;
        bookAuthors.className = 'bookAuthors';
        bookFactsContainer.appendChild(bookAuthors);
    }

    /*Creating a <p> element with class name : bookPublishedDate. As a child of the 'bookFactsContainer', that will contain the book's published date as text
    <p class="bookPlushedDate"> Publish Date: ... </p>
    */
    let bookPublishedDate = document.createElement('p');
    bookPublishedDate.innerText = `Publish Date: ${bookPublishedDateInfo}`;
    bookPublishedDate.className = 'bookPublishedDate';
    bookFactsContainer.appendChild(bookPublishedDate);


    /*Creating <p> elements: 
    <p>ISBN_10: ...</p>
    <p>ISBN_13: ...</p>
    */
    if(industryIdentifiers.length > 0){
        
        for(let i=0;i<=1;i++){
            let bookIdentifiers = document.createElement('p');
            bookIdentifiers.innerText = `${industryIdentifiers[i].type}: ${industryIdentifiers[i].identifier}`;
            bookFactsContainer.appendChild(bookIdentifiers);
        }
    }


    populateFavoriteArray(industryIdentifiers[0].identifier,bookFactsContainer,titleInfo);
    
    previewAvailability(viewabilityState,bookFactsContainer, id);

    /*Returning the bookFactsContainer object*/
    return bookFactsContainer;
}

function populateFavoriteArray(book,bookFactsContainer,titleInfo){
    /*Creates input*/
    let addfavorite = document.createElement('input');
    //bookFactsContainer.appendChild(addfavorite);

    /*
    Modifying the addFavorite object:
    */
    Object.assign(addfavorite,{
        type :'button',
        value :'Add to favorites',
        onclick: function(){
            let favorites = JSON.parse(localStorage.getItem('storedFavoritesArray'));
            let index = favorites.indexOf(book);
            console.log(index);
            
            if(index == -1){
                favorites.push(book);
                localStorage.setItem('storedFavoritesArray',JSON.stringify(favorites));
                alert(`The book: ${titleInfo}, has been added to your favorites`);
            }    
        },
    })

    bookFactsContainer.appendChild(addfavorite);
}

/*The purpose of this function is to check if a book is able to show a preview based on the viewAbility State, if it is then an input of type button will be created for the user to click and see the preview of a book*/
function previewAvailability(viewabilityState,bookFactsContainer,bookid){

    if (viewabilityState == 'PARTIAL' || viewabilityState == 'FULL'){
        let bookViewButton = document.createElement('input');
    
    Object.assign(bookViewButton, {
        type: 'button',
        value: 'Preview',

        /*window.location=bookViewer.html is same as: onclick='location.href=bookViewer.html'. Using query strings to use a book's id as the value to the 'id' key.
        */
        onclick: function(){
            window.location = `bookViewer.html?id=${bookid}`;
        },
    })
        bookFactsContainer.appendChild(bookViewButton);
    }
}


function createBookImageDiv(thumbnailLink){
    /*Creating <div> elements where each book thumbnail will be placed */
    let bookImageContainer = document.createElement('div');
    bookImageContainer.className ='bookImageContainer';

    /* Creating an <img> element, within the bookImagecontainer object, where the book cover will be placed.
    <img src="thumbnailLink">
    */

    let bookImage = document.createElement('img');
    bookImage.src = thumbnailLink;

    bookImageContainer.appendChild(bookImage);


    return bookImageContainer;
}

function start(){
    gapi.client.init({
        'apiKey': 'AIzaSyCc6gZwjBm2hDgyJGgUA_aFyM3KbfzGwGQ',
        'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/books/v1/rest'],
    }).then(function(){
        /*Executes the API request and returns a promise generated by the API request.
          The method name gapi.client.books.volumes.list makes an API request to the Google Books API. It'll search for books based 
          on the query AKA "q" making sure the 'intitle' template string gets the value from the locally stored data 'mytext' and matches books to that title. 
        */
        return gapi.client.books.volumes.list({
            q: `${localStorage.getItem('firstSearch')}`,

        });
    }).then(function(response){
        /*
        The response argument it's an object that represents the response from an API call
        In the case that the API call was successful:
        */
        let bookArray = response.result.items;
        let contentDiv = document.getElementById('content');

        if(bookArray){
            bookArray.forEach(function(book){

                
                let thumbnailInfo = book.volumeInfo && book.volumeInfo.imageLinks && book.volumeInfo.imageLinks.thumbnail;
                let authorsInfo = book.volumeInfo && book.volumeInfo.authors;
                let titleInfo = book.volumeInfo && book.volumeInfo.title;
                let industryIdentifiersInfo = book.volumeInfo && book.volumeInfo.industryIdentifiers;
                
                if(thumbnailInfo && titleInfo && authorsInfo && industryIdentifiersInfo){
                    
                    let thumbnailLink = book.volumeInfo.imageLinks.thumbnail;
                    let title = book.volumeInfo.title;
                    let authors = book.volumeInfo.authors;
                    let publishedDate = book.volumeInfo.publishedDate;
                    let id = book.id;
                    let viewabilityState = book.accessInfo.viewability;
                    let industryIdentifiers = book.volumeInfo.industryIdentifiers;
                    

                    /*bookContainer hold a reference to the the new <div> element that was created and apped it under the parent <div>/contentDiv.
                    <div class="book-container" style="display:flex"></div>
                    */
                    let bookContainer = document.createElement('div');
                    bookContainer.style.display = 'flex';
                    bookContainer.className ='book-container';
                    contentDiv.appendChild(bookContainer);

                    /*bookImageStructure holds a reference to the newly created <div> elements that help display book's image by calling the createBookImageDiv() function.*/
                    let bookImageStructure = createBookImageDiv(thumbnailLink);
                    bookContainer.appendChild(bookImageStructure);

                    /*bookFacstsStructure holds a reference to the newly created <div> elements that help display book's image by calling the createBookFactsContainer() function.*/
                    let bookFactsStructure = createBookFactsContainer(title,authors,publishedDate,viewabilityState,id,industryIdentifiers);
                    bookContainer.appendChild(bookFactsStructure);

                    
                    /*This what the HTML structure look like for every book:

                    <div class="book-container" style="display:flex;">
                        <div class="bookImageContainer">
                            <img src="...">
                        </div>

                        <div clas="bookFactsContainer">
                            <p class="bookTitle"> Title: ... </p>
                            <p class="bookAuthors"> Author/s: ... </p>
                            <p clas="bookPublishedDate"> Publish Date: ...</p>
                            <p>ISBN_10: ... </p>
                            <p>ISBN_13: ... </p>
                            <input type="button" value="Add to favorites">
                            <input type="button" value="Preview">
                        </div>
                    </div>
                    */
                    
                }
                
            });
        }
    },function(reason){
        /*
        In the case the API call was unsucessful:
        */
        alert('Error: '+ reason.result.error.message);
    });
};


gapi.load('client',start);

/* This checks whether the array that will be storing the the favorite books is already in local storage or not, if no then it'll create an empty one */
if(localStorage.getItem('storedFavoritesArray') == null){
    let favoritesArray = [];
    localStorage.setItem('storedFavoritesArray',JSON.stringify(favoritesArray));
}



