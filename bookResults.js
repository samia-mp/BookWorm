
function createBookFactsContainer(titleInfo, authorsInfo, bookPublishedDateInfo, viewAbilityState){
    /*Creating a div element with class name : bookFactsContainer*/
    let bookFactsContainer = document.createElement('div');
    bookFactsContainer.className = 'bookFactsContainer';

    /*Creating a <p> element with class name : bookTitle. As a child of the previous element, that will contain the book title as text*/
    let bookTitle = document.createElement('p');
    bookTitle.innerText = `Title: ${titleInfo}`;
    bookTitle.className = 'bookTitle';
    bookFactsContainer.appendChild(bookTitle);

    /*Creating a <p> element with class name : bookTitle. As a child of the 'bookFactsContainer', that will contain the book's author as text*/
    if(authorsInfo && authorsInfo.length > 0 ){
        let bookAuthors = document.createElement('p');
        bookAuthors.innerText = `Author/s: ${authorsInfo.join(', ')}`;
        bookAuthors.className = 'bookAuthors';
        bookFactsContainer.appendChild(bookAuthors);
    }

    /*Creating a <p> element with class name : bookPublishedDate. As a child of the 'bookFactsContainer', that will contain the book's published date as text*/
    let bookPublishedDate = document.createElement('p');
    bookPublishedDate.innerText = `Publish Date: ${bookPublishedDateInfo}`;
    bookPublishedDate.className = 'bookPublishedDate';
    bookFactsContainer.appendChild(bookPublishedDate);

    /*Calling the previewAbilityState*/
    previewAvailability(viewAbilityState,bookFactsContainer);

    /*Returning a reference of the the bookFactsContainer object*/
    return bookFactsContainer;
}


/*The purpose of this fucntion is to check if a book is able to show a preview based on the viewAbility State, if it is then an input of type button will be created for the user to click and see the preview of a book*/
function previewAvailability(viewAbilityState,bookFactsContainer){

    if (viewAbilityState == 'PARTIAL' || viewAbilityState == 'FULL'){
        let bookViewButton = document.createElement('input');
    
    Object.assign(bookViewButton, {
        type: 'button',
        value: 'View',
        onclick: function(){
            window.location = 'https://www.google.com/books/edition/Down_and_Out_in_the_Magic_Kingdom/gfg13CM_kU8C?hl=en&gbpv=1';
        },
    })
        bookFactsContainer.appendChild(bookViewButton);
    }
}


function createBookImageDiv(thumbnailLink){
    /*Creating <div> elements where each book thumbnail will be placed */
    let bookImageContainer = document.createElement('div');
    bookImageContainer.className ='bookImageContainer';

    /* Creating an <img> element, within the bookImagecontainer, where the book cover will be placed */

    let bookImage = document.createElement('img');
    bookImage.src = thumbnailLink;

    bookImageContainer.appendChild(bookImage);


    return bookImageContainer;
}

function start(){
    gapi.client.init({
        'apiKey': 'AIzaSyCc6gZwjBm2hDgyJGgUA_aFyM3KbfzGwGQ',
        'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/books/v1/rest'],
    }).then(function(){
        /*Executes the API request and returns a promise generated by the API request.
          The method name gapi.client.books.volumes.list makes an API request to the Google Books API. It'll search for books based 
          on the query AKA "q" making sure the 'intitle' template string gets the value from the locally stored data 'mytext' and matches books to that title. 
        */
        return gapi.client.books.volumes.list({
            //q: `intitle:${localStorage.getItem('firstSearch')}`,
            q: `${localStorage.getItem('firstSearch')}`,

        });
    }).then(function(response){
        /*
        The response argument it's an object that represents the response from an API call
        In the case that the API call was successful:
        */
        let bookArray = response.result.items;
        let contentDiv = document.getElementById('content');

        if(bookArray){
            bookArray.forEach(function(book){

                
                let thumbnailInfo = book.volumeInfo && book.volumeInfo.imageLinks && book.volumeInfo.imageLinks.thumbnail;
                let authorsInfo = book.volumeInfo && book.volumeInfo.authors;
                let titleInfo = book.volumeInfo && book.volumeInfo.title;
                //let bookPublishedDate = book.volumeInfo && book.volumeInfo.PublishedDate;
                
                if(thumbnailInfo && titleInfo && authorsInfo){
                    
                    let thumbnailLink = book.volumeInfo.imageLinks.thumbnail;
                    let titleInfoLink = book.volumeInfo.title;
                    let authorsInfoLink = book.volumeInfo.authors;
                    let bookPublishedDateInfoLink = book.volumeInfo.publishedDate;
                    

                    /*Appends a book container for a specified book. More <div> elements are being created*/
                    let bookContainer = document.createElement('div');
                    bookContainer.style.display = 'flex';
                    bookContainer.className ='book-container';
                    contentDiv.appendChild(bookContainer);

                    /*Appends a container for a book's image for a specified book under the book container. More <div> elements are being created*/
                    let bookImageStructure = createBookImageDiv(thumbnailLink);
                    bookContainer.appendChild(bookImageStructure);

                    /*Appends a container for a book's factual information for a specified book under the book container. More <div> elements are being created*/
                    let bookFactsStructure = createBookFactsContainer(titleInfoLink,authorsInfoLink,bookPublishedDateInfoLink,book.accessInfo.viewability);

                    bookContainer.appendChild(bookFactsStructure);

                    /**/
                    console.log(book.accessInfo.viewability);
                    console.log(book.volumeInfo.industryIdentifiers[1].identifier);
                    /*let checkIfViewerExists = loadViewer()*/
                }
                
            });
        }
    },function(reason){
        /*
        In the case the API call was unsucessful:
        */
        alert('Error: '+ reason.result.error.message);
    });
};



 


gapi.load('client',start);
